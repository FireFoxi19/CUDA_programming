#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include <stdio.h>
#include <iostream>

cudaError_t addWithCuda(int *c, const int *a, const int *b, unsigned int size);
__global__ void addKernel(int *c, const int *a, const int *b)
{
    int i = (blockIdx.x * blockDim.x) + threadIdx.x;
    c[i] = a[i] + b[i];
}

int main()
{
    const int arraySize = 1 << 20;
    int* a = new int[arraySize];
    int* b = new int[arraySize];
    int* c = new int[arraySize];

    cudaError_t cudaStatus = addWithCuda(c, a, b, arraySize);
    if (cudaStatus != cudaSuccess) {
        fprintf(stderr, "addWithCuda failed!");
        return 1;
    }

    cudaStatus = cudaDeviceReset();
    if (cudaStatus != cudaSuccess) {
        fprintf(stderr, "cudaDeviceReset failed!");
        return 1;    
	}

    return 0;
}

cudaError_t addWithCuda(int *c, const int *a, const int *b, unsigned int size)
{
    int *dev_a = 0;
    int *dev_b = 0;
    int *dev_c = 0;
    cudaError_t cudaStatus;
    cudaEvent_t start, stop;
    float time = 0;

    cudaStatus = cudaSetDevice(0);
    if (cudaStatus != cudaSuccess) {
        fprintf(stderr, "cudaSetDevice failed!  Do you have a CUDA-capable GPU installed?");
        goto Error;
    }

    cudaStatus = cudaMalloc((void**)&dev_c, size * sizeof(int));
    if (cudaStatus != cudaSuccess) {
        fprintf(stderr, "cudaMalloc failed!");
        goto Error;
    }

    cudaStatus = cudaMalloc((void**)&dev_a, size * sizeof(int));
    if (cudaStatus != cudaSuccess) {
        fprintf(stderr, "cudaMalloc failed!");
     goto Error;
    }

    cudaStatus = cudaEventCreate(&start);
    if(cudaStatus != cudaSuccess) {
        fprintf(stderr, "cudaEventCreate failed!");
        goto Error;
    }

    cudaStatus = cudaEventCreate(&stop);
    if (cudaStatus != cudaSuccess) {
        fprintf(stderr, "cudaEventCreate failed!");
        goto Error;
    }

    cudaStatus = cudaMalloc((void**)&dev_b, size * sizeof(int));
    if (cudaStatus != cudaSuccess) {
        fprintf(stderr, "cudaEventCreate failed!");
        goto Error;
    }

    cudaStatus = cudaMemcpy(dev_a, a, size * sizeof(int), cudaMemcpyHostToDevice);
    if (cudaStatus != cudaSuccess) {
        fprintf(stderr, "cudaMemcpy failed!");
        goto Error;
    }

    cudaStatus = cudaMemcpy(dev_b, b, size * sizeof(int), cudaMemcpyHostToDevice);
    if (cudaStatus != cudaSuccess) {
      fprintf(stderr, "cudaMemcpy failed!");
        goto Error;
    }

    for (int threads = 1; threads <= 1024; threads *= 2) {

        int blocks = size / threads;

        cudaStatus = cudaEventRecord(start, 0);
        if (cudaStatus != cudaSuccess) {
            fprintf(stderr, "cudaEventRecord failed!");
            goto Error;
        }

        addKernel<<<blocks, threads>>>(dev_c, dev_a, dev_b);

        cudaStatus = cudaEventRecord(stop, 0);
        if (cudaStatus != cudaSuccess) {
            fprintf(stderr, "cudaEventRecord failed!");
            goto Error;
        }

        cudaStatus = cudaEventSynchronize(stop);
        if (cudaStatus != cudaSuccess) {
            fprintf(stderr, "cudaEventSynchronize failed!");
            goto Error;
        }

        cudaStatus = cudaEventElapsedTime(&time, start, stop);
        if (cudaStatus != cudaSuccess) {
            fprintf(stderr, "cudaEventElapsedTime failed!");
            goto Error;
        }

        std::cout << "threads/block= " << threads << "\n";
        std::cout << "all blocks = " << blocks << "\n";
        std::cout << "Time = " << time << "ms\n\n";
        cudaStatus = cudaGetLastError();
        if (cudaStatus != cudaSuccess) {
            fprintf(stderr, "addKernel launch failed: %s\n", cudaGetErrorString(cudaStatus));
            goto Error;
        }

        cudaStatus = cudaDeviceSynchronize();
        if (cudaStatus != cudaSuccess) {
            fprintf(stderr, "cudaDeviceSynchronize returned error code %d after launching addKernel!\n", cudaStatus);
            goto Error;
        }
    }

    cudaStatus = cudaMemcpy(c, dev_c, size * sizeof(int), cudaMemcpyDeviceToHost);
    if (cudaStatus != cudaSuccess) {
        fprintf(stderr, "cudaMemcpy failed!");
        goto Error;
    }

Error:
    cudaFree(dev_c);
    cudaFree(dev_a);
    cudaFree(dev_b);
    cudaEventDestroy(start);
    cudaEventDestroy(stop);

    return cudaStatus;
}